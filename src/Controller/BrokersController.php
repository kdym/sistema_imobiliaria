<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\UsersTable;
use App\Policy\BrokersPolicy;
use Cake\Event\Event;

/**
 * Brokers Controller
 *
 * @property \App\Model\Table\BrokersTable $Brokers
 * @property \App\Model\Table\UsersTable $Users
 * @property \App\Controller\Component\FormatterComponent $Formatter
 *
 * @method \App\Model\Entity\Broker[] paginate($object = null, array $settings = [])
 */
class BrokersController extends AppController
{

    function isAuthorized($user)
    {
        return BrokersPolicy::isAuthorized($this->request->action, $user);
    }

    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub

        $this->viewBuilder()->setHelpers(['Users']);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadComponent('Formatter');

        $this->loadModel('Users');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $brokers = $this->Users->find()
            ->where(['role' => UsersTable::ROLE_BROKER]);

        $this->set(compact('brokers'));
        $this->set('_serialize', ['brokers']);
    }

    /**
     * View method
     *
     * @param string|null $id Broker id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $broker = $this->Brokers->get($id, [
            'contain' => ['Users']
        ]);

        $this->set('broker', $broker);
        $this->set('_serialize', ['broker']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $broker = $this->Brokers->newEntity();
        if ($this->request->is('post')) {
            $broker = $this->Brokers->patchEntity($broker, $this->request->getData());
            if ($this->Brokers->save($broker)) {
                $this->Flash->success(__('The broker has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The broker could not be saved. Please, try again.'));
        }
        $users = $this->Brokers->Users->find('list', ['limit' => 200]);
        $this->set(compact('broker', 'users'));
        $this->set('_serialize', ['broker']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Broker id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $broker = $this->Brokers->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $broker = $this->Brokers->patchEntity($broker, $this->request->getData());
            if ($this->Brokers->save($broker)) {
                $this->Flash->success(__('The broker has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The broker could not be saved. Please, try again.'));
        }
        $users = $this->Brokers->Users->find('list', ['limit' => 200]);
        $this->set(compact('broker', 'users'));
        $this->set('_serialize', ['broker']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Broker id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['delete']);

        $user = $this->Users->get($id);

        if ($this->Users->delete($user)) {
            $this->Flash->success(__('Corretor excluÃ­do'));
        } else {
            $this->Flash->error(__('Erro ao excluir Corretor'));
        }

        return $this->redirect($this->referer());
    }

    public function form($id = null)
    {
        $this->set(compact('id'));

        if ($id) {
            $user = $this->Users->get($id, [
                'contain' => ['Brokers']
            ]);
        } else {
            $user = $this->Users->newEntity();
        }

        if ($this->request->is('get')) {
            if (!empty($user['broker']['comissao'])) {
                $user['broker']['comissao'] = $this->Formatter->formatDecimal($user['broker']['comissao']);
            }
        }

        if ($this->request->is(['post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());

            $user['role'] = UsersTable::ROLE_BROKER;

            if ($this->Users->save($user)) {
                $this->Flash->success('Salvo com sucesso');

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error('Existem erros no formulÃ¡rio, favor verificar');
            }
        }

        $this->set(compact('user'));
    }
}
