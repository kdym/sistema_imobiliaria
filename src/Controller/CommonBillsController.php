<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\PropertiesTable;
use App\Policy\CommonBillsPolicy;

/**
 * CommonBills Controller
 *
 * @property \App\Model\Table\CommonBillsTable $CommonBills
 * @property \App\Model\Table\PropertiesTable $Properties
 * @property \App\Model\Table\PropertiesFeesTable $PropertiesFees
 */
class CommonBillsController extends AppController
{
    function isAuthorized($user)
    {
//        $element = $this->Users->findById($this->request->getParam('pass.0'))
//            ->applyOptions(['withDeleted'])
//            ->first();

        return CommonBillsPolicy::isAuthorized($this->request->action, $user);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Properties');
        $this->loadModel('PropertiesFees');
    }

    public function searchProperty()
    {
        $this->autoRender = false;
        $this->response->type('json');

        $search = $this->Properties->parseSearch($this->Properties->parseCode($this->request->getQuery('name')));

        $properties = $this->Properties->find()
            ->contain('Locators.Users')
            ->where([
                "OR" => [
                    "Properties.id LIKE" => $search,
                    "Properties.endereco LIKE" => $search,
                    "Properties.numero LIKE" => $search,
                    "Properties.complemento LIKE" => $search,
                    "Properties.bairro LIKE" => $search,
                    "Properties.cidade LIKE" => $search,
                    "Properties.uf LIKE" => $search,
                ],
            ])
            ->where(['Properties.id !=' => $this->request->getQuery('property_id')])
            ->limit(10);

        $this->response->body(json_encode($properties));
    }

    public function add()
    {
        $this->autoRender = false;
        $this->response->type('json');

        $updates = [];

        $property1 = $this->Properties->get($this->request->getData('property_id1'), [
            'contain' => ['PropertiesFees']
        ]);
        $property2 = $this->Properties->get($this->request->getData('property_id2'), [
            'contain' => ['PropertiesFees']
        ]);

        $type = $this->request->getData('type');

        if ($property1['properties_fees'][0][$type] != $property2['properties_fees'][0][$type]) {
            $propertyFees = $this->PropertiesFees->newEntity();

            $propertyFees['taxa_administrativa'] = $property1['properties_fees'][0]['taxa_administrativa'];
            $propertyFees['taxa_administrativa_tipo'] = $property1['properties_fees'][0]['taxa_administrativa_tipo'];
            $propertyFees['taxa_administrativa_incidencia'] = $property1['properties_fees'][0]['taxa_administrativa_incidencia'];
            $propertyFees['parcelas_13_taxa_administrativa'] = $property1['properties_fees'][0]['parcelas_13_taxa_administrativa'];
            $propertyFees['start_date'] = date('Y-m-d');
            $propertyFees['property_id'] = $property1['properties_fees'][0]['property_id'];

            foreach (PropertiesTable::$propertiesBills as $key => $b) {
                $propertyFees[$key] = $property1['properties_fees'][0][$key];
            }

            $propertyFees[$type] = $property2['properties_fees'][0][$type];

            $this->PropertiesFees->save($propertyFees);

            $updates[] = 'Vencimento das Contas iguais';
        }

        switch ($type) {
            case PropertiesTable::BILL_WATER:
                if ($property1['codigo_saae'] != $property2['codigo_saae']) {
                    $property1['codigo_saae'] = $property2['codigo_saae'];

                    $this->Properties->save($property1);

                    $updates[] = 'CÃ³digo SAAE dos ImÃ³veis iguais';
                }

                break;
        }

        $exists = $this->CommonBills->find()
            ->where(['tipo' => $type])
            ->where(['property_1' => $property1['id']])
            ->where(['property_2' => $property2['id']])
            ->first();

        if (!$exists) {
            $commonBill = $this->CommonBills->newEntity();

            $commonBill['tipo'] = $type;
            $commonBill['property_1'] = $property1['id'];
            $commonBill['property_2'] = $property2['id'];

            $this->CommonBills->save($commonBill);

            $commonBill = $this->CommonBills->newEntity();

            $commonBill['tipo'] = $type;
            $commonBill['property_1'] = $property2['id'];
            $commonBill['property_2'] = $property1['id'];

            $this->CommonBills->save($commonBill);
        }

        $this->response->body(json_encode($updates));
    }

    public function delete($id)
    {
        $commonBill = $this->CommonBills->get($id);

        $reverseCommonBill = $this->CommonBills->find()
            ->where(['tipo' => $commonBill['tipo']])
            ->where(['property_1' => $commonBill['property_2']])
            ->where(['property_2' => $commonBill['property_1']])
            ->first();

        $this->CommonBills->delete($commonBill);
        $this->CommonBills->delete($reverseCommonBill);

        $this->Flash->success('ExcluÃ­do com sucesso');

        $this->redirect($this->referer());
    }
}
