<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\UsersTable;
use App\Policy\GuarantorsPolicy;

/**
 * Guarantors Controller
 *
 * @property \App\Model\Table\GuarantorsTable $Guarantors
 * @property \App\Model\Table\ContractsTable $Contracts
 * @property \App\Model\Table\UsersTable $Users
 */
class GuarantorsController extends AppController
{
    function isAuthorized($user)
    {
//        $element = $this->Users->findById($this->request->getParam('pass.0'))
//            ->first();

        return GuarantorsPolicy::isAuthorized($this->request->action, $user);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Contracts');
        $this->loadModel('Users');
    }

    public function addExisting()
    {
        $this->autoRender = false;
        $this->response->type('json');

        $guarantor = $this->Guarantors->find()
            ->where(['user_id' => $this->request->getData('user_id')])
            ->where(['contract_id' => $this->request->getData('contract_id')])
            ->first();

        if (!$guarantor) {
            $guarantor = $this->Guarantors->newEntity();

            $guarantor['user_id'] = $this->request->getData('user_id');
            $guarantor['contract_id'] = $this->request->getData('contract_id');

            $this->Guarantors->save($guarantor);

            $this->Flash->success('Fiador salvo com sucesso');

            $response = 'ok';
        } else {
            $response = 'exists';
        }

        $this->response->body(json_encode($response));
    }

    public function form($contractId, $id = null)
    {
        $this->set(compact('id'));

        $referrer = $this->referer();

        $contract = $this->Contracts->get($contractId, [
            'contain' => ['Properties']
        ]);

        $this->set(compact('contract', 'referrer'));

        if (!$id) {
            $guarantor = $this->Users->newEntity();
        } else {
            $guarantorAssociation = $this->Guarantors->get($id);
            $guarantor = $this->Users->get($guarantorAssociation['user_id'], [
                'contain' => ['Spouses']
            ]);
        }

        if ($this->request->is(['post', 'put'])) {
            $this->Users->patchEntity($guarantor, $this->request->getData());

            if (!$id) {
                $guarantor['role'] = UsersTable::ROLE_GUARANTOR;
                $guarantor['username'] = $this->Users->getLastUsername() + 1;
            }

            if ($this->Users->save($guarantor)) {
                if (!$id) {
                    $guarantorLink = $this->Guarantors->newEntity();

                    $guarantorLink['user_id'] = $guarantor['id'];
                    $guarantorLink['contract_id'] = $contract['id'];

                    $this->Guarantors->save($guarantorLink);
                }

                $this->Flash->success('Fiador salvo com sucesso');

                $this->redirect(['controller' => 'contracts', 'action' => 'view', $contract['id']]);
            }
        }

        $this->set(compact('guarantor'));
    }

    public function fetchUsers()
    {
        $this->autoRender = false;
        $this->response->type('json');

        $search = $this->Users->parseSearch($this->Users->parseUsername($this->request->getQuery('name')));

        $users = $this->Users->find()
            ->where([
                "OR" => [
                    "Users.nome LIKE" => $search,
                    "Users.username LIKE" => $search,
                ],
            ])
            ->limit(10);

        $this->response->body(json_encode($users));
    }

    public function delete($id = null)
    {
        $this->request->allowMethod('delete');

        $guarantor = $this->Guarantors->get($id);
        if ($this->Guarantors->delete($guarantor)) {
            $this->Flash->success(__('ExcluÃ­do com sucesso'));
        }

        return $this->redirect($this->referer());
    }
}
