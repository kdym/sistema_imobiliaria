<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\ContractsTable;
use App\Model\Table\ContractsValuesTable;
use App\Policy\SlipsPolicy;
use Cake\Event\Event;
use DateInterval;
use DatePeriod;
use DateTime;

/**
 * Slips Controller
 *
 * @property \App\Model\Table\ContractsTable $Contracts
 * @property \App\Model\Table\PropertiesPricesTable $PropertiesPrices
 * @property \App\Model\Table\ContractsValuesTable $ContractsValues
 * @property \App\Model\Table\CompanyDataTable $CompanyData
 *
 */
class SlipsController extends AppController
{

    function isAuthorized($user)
    {
//        $element = $this->Users->findById($this->request->getParam('pass.0'))
//            ->first();

        return SlipsPolicy::isAuthorized($this->request->action, $user);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Contracts');
        $this->loadModel('PropertiesPrices');
        $this->loadModel('CompanyData');
        $this->loadModel('ContractsValues');
    }

    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub

        $this->viewBuilder()->setHelpers(['Slips']);
    }

    public function index($contractId)
    {
        $contract = $this->Contracts->get($contractId, [
            'contain' => ['Properties.PropertiesPrices', 'ContractsValues']
        ]);
        $companyData = $this->CompanyData->find()->first();

        $this->set(compact('contract', 'companyData'));

        $startDate = new DateTime('now');
        $endDate = new DateTime('now');

        if ($this->request->is('post')) {
            $period = explode(' a ', $this->request->getData('period'));

            $startDate = new DateTime($this->Contracts->parseDate($period[0]));
            $endDate = new DateTime($this->Contracts->parseDate($period[1]));
        }

        $startDate->modify('first day of this month');
        $endDate->modify('last day of this month');

        $firstSalary = new DateTime($contract['primeiro_vencimento']->format('Y-m-d'));

        $interval = new DatePeriod($startDate, new DateInterval('P1M'), $endDate);

        $slips = [];
        foreach ($interval as $d) {
            if ($d->format('Y-m') >= $firstSalary->format('Y-m')) {
                $contractValues = $this->ContractsValues->find()
                    ->where(['date_format(start_date, "%Y-%m") <=' => $d->format('Y-m')])
                    ->where(['contract_id' => $contract['id']])
                    ->last();

                if ($d->format('Y-m') == $firstSalary->format('Y-m')) {
                    $salary = new DateTime($firstSalary->format('Y-m-d'));
                } else {
                    $salary = new DateTime(sprintf("%s-%s", $d->format('Y-m'), $contractValues['vencimento_boleto']));
                }

                $slips[$salary->format('d/m/Y')] = $this->getSlipInfo($salary, $contract, $contractValues);
            }
        }

        $this->set(compact('slips'));
    }

    public function getSlipInfo($date, $contract, $contractValues)
    {
        $values = [];

        $sum = 0;

        $today = new DateTime('now');
        $firstSalary = new DateTime($contract['primeiro_vencimento']->format('Y-m-d'));
        $ownDate = new DateTime($contract['data_posse']->format('Y-m-d'));

        //Aluguel
        $propertyPrice = $this->PropertiesPrices->find()
            ->where(['date_format(start_date, "%Y-%m") <=' => $date->format('Y-m')])
            ->where(['property_id' => $contract['property_id']])
            ->last();

        if (!$propertyPrice) {
            $propertyPrice = $this->PropertiesPrices->find()
                ->where(['property_id' => $contract['property_id']])
                ->last();
        }

        $rent = $propertyPrice['valor'];

        if ($date->format('Y-m') == $firstSalary->format('Y-m')) {
            $diff = $ownDate->diff($firstSalary);

            $rent = ($propertyPrice['valor'] * ($diff->days + 1)) / ContractsTable::DEFAULT_MONTH_DAYS;
        }

        $values[] = [
            'name' => 'Aluguel',
            'value' => $rent
        ];

        $sum += $rent;

        //Taxas Extras
        foreach (ContractsValuesTable::$fees as $key => $f) {
            if (!empty($contractValues[$key]) && $key <> ContractsValuesTable::CPMF) {
                $value = $this->getExtraFees($date, $key);

                $values[] = [
                    'name' => $f,
                    'value' => $value
                ];

                $sum += $value;
            }
        }

        //Desconto/Multa
        if ($today > $date) {
            if (!empty($contractValues['multa'])) {
                $values[] = [
                    'name' => ContractsTable::$discountOrFine[ContractsTable::FINE],
                    'value' => ($sum * $contractValues['multa']) / 100
                ];
            }
        } else {
            if (!empty($contractValues['desconto'])) {
                $values[] = [
                    'name' => ContractsTable::$discountOrFine[ContractsTable::DISCOUNT],
                    'value' => (($sum * $contractValues['desconto']) / 100) * -1
                ];
            }
        }

        return $values;
    }

    public function getExtraFees($date, $fee)
    {
        return 0;
    }

    public function report($contractId)
    {
        $this->viewBuilder()->setLayout('slip');

        $contract = $this->Contracts->get($contractId, [
            'contain' => [
                'Properties.Locators.Users'
            ]
        ]);

        $this->set(compact('contract'));

        $startDate = new DateTime($this->request->getQuery('start_date'));
        $endDate = new DateTime($this->request->getQuery('end_date'));

        $firstSalary = new DateTime($contract['primeiro_vencimento']->format('Y-m-d'));

        $interval = new DatePeriod($startDate, new DateInterval('P1M'), $endDate);

        $slips = [];
        foreach ($interval as $d) {
            if ($d->format('Y-m') >= $firstSalary->format('Y-m')) {
                $contractValues = $this->ContractsValues->find()
                    ->where(['date_format(start_date, "%Y-%m") <=' => $d->format('Y-m')])
                    ->where(['contract_id' => $contract['id']])
                    ->last();

                if ($d->format('Y-m') == $firstSalary->format('Y-m')) {
                    $salary = new DateTime($firstSalary->format('Y-m-d'));
                } else {
                    $salary = new DateTime(sprintf("%s-%s", $d->format('Y-m'), $contractValues['vencimento_boleto']));
                }

                $slips[$salary->format('d/m/Y')] = $this->getSlipInfo($salary, $contract, $contractValues);
            }
        }

        $this->set(compact('slips'));
    }
}
