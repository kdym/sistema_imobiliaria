<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\SlipsCustomsValuesTable;
use App\Policy\SlipsCustomsValuesPolicy;
use DateTime;

/**
 * SlipsCustomsValues Controller
 *
 * @property \App\Model\Table\SlipsCustomsValuesTable $SlipsCustomsValues
 * @property \App\Model\Table\ContractsTable $Contracts
 * @property \App\Model\Table\RecursiveTable $Recursive
 */
class SlipsCustomsValuesController extends AppController
{

    function isAuthorized($user)
    {
//        $element = $this->Users->findById($this->request->getParam('pass.0'))
//            ->first();

        return SlipsCustomsValuesPolicy::isAuthorized($this->request->action, $user);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Contracts');
        $this->loadModel('Recursive');
    }

    public function form($contractId)
    {
        $slipsController = new SlipsController();

        $slipDate = new DateTime($this->SlipsCustomsValues->parseDate($this->request->getQuery('slip')));
        $contract = $this->Contracts->get($contractId, [
            'contain' => ['Properties.PropertiesPrices', 'ContractsValues']
        ]);

        $this->set(compact('slipDate', 'contract'));

        $startDate = new DateTime($slipDate->format('Y-m-d'));
        $endDate = new DateTime($slipDate->format('Y-m-d'));

        $startDate->modify('first day of this month');
        $endDate->modify('last day of this month');

        $slips = $slipsController->findSlipsInPeriod($contract, $startDate, $endDate);

        $oldValues = [];
        foreach ($slips[$slipDate->format('d/m/Y')] as $v) {
            $oldValues[$v['type']] = $v['value'];
        }

        $this->set('slipValues', $slips[$slipDate->format('d/m/Y')]);

        if ($this->request->is('post')) {
            foreach ($this->request->getData('name') as $key => $name) {
                $type = $this->request->getData('type')[$key];
                $value = $this->SlipsCustomsValues->parseDecimal($this->request->getData('value')[$key]);

                if ($type <> SlipsCustomsValuesTable::CUSTOM) {
                    if ($value == $oldValues[$type]) {
                        continue;
                    }
                }

                $deleted = false;

                if (!empty($this->request->getData('custom_id')[$key])) {
                    $customValue = $this->SlipsCustomsValues->get($this->request->getData('custom_id')[$key]);

                    if ($type == SlipsCustomsValuesTable::CUSTOM) {
                        if (!empty($this->request->getData('delete_fee')[$this->request->getData('custom_id')[$key]])) {
                            $deleted = $this->request->getData('delete_fee')[$this->request->getData('custom_id')[$key]];
                        }
                    }
                } else {
                    $customValue = $this->SlipsCustomsValues->newEntity();
                }

                $customValue['contract_id'] = $contractId;
                $customValue['descricao'] = $name;
                $customValue['mes'] = $slipDate->format('m');
                $customValue['ano'] = $slipDate->format('Y');
                $customValue['tipo'] = $type;
                $customValue['valor'] = $value;
                $customValue['deleted'] = $deleted;

                $this->SlipsCustomsValues->save($customValue);
            }

            $this->Flash->success('Salvo com sucesso');

            $this->redirect(['controller' => 'slips', 'action' => 'index', $contractId]);
        }
    }

    public function addRecursiveFee($contractId)
    {
        $recursive = $this->Recursive->newEntity();

        $recursive['dia'] = '*';
        $recursive['mes'] = '*';
        $recursive['ano'] = '*';

        switch ($this->request->getData('recursive')) {
            case SlipsCustomsValuesTable::RECURSIVE_ALL:
                $recursive['start_date'] = null;
                $recursive['end_date'] = null;

                break;

            case SlipsCustomsValuesTable::RECURSIVE_START_AT:
                $recursive['start_date'] = $this->SlipsCustomsValues->parseDate($this->request->getData('start_at_input'));
                $recursive['end_date'] = null;

                break;

            case SlipsCustomsValuesTable::RECURSIVE_PERIOD:
                $period = explode(' a ', $this->request->getData('period_input'));

                $recursive['start_date'] = $this->SlipsCustomsValues->parseDate($period[0]);
                $recursive['end_date'] = $this->SlipsCustomsValues->parseDate($period[1]);

                break;
        }

        if ($this->Recursive->save($recursive)) {
            $customValue = $this->SlipsCustomsValues->newEntity();

            $customValue['contract_id'] = $contractId;
            $customValue['descricao'] = $this->request->getData('name');

            $slipDate = new DateTime($this->request->getData('slip_date'));

            $customValue['mes'] = $slipDate->format('m');
            $customValue['ano'] = $slipDate->format('Y');
            $customValue['tipo'] = SlipsCustomsValuesTable::CUSTOM;
            $customValue['valor'] = $this->SlipsCustomsValues->parseDecimal($this->request->getData('value'));
            $customValue['deleted'] = false;
            $customValue['recursive_id'] = $recursive['id'];

            if ($this->SlipsCustomsValues->save($customValue)) {
                $this->Flash->success('Salvo com sucesso');

                $this->redirect(['controller' => 'slips', 'action' => 'index', $contractId]);
            }
        }
    }
}
