<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\UsersTable;
use App\Policy\TenantsPolicy;
use Cake\Auth\DefaultPasswordHasher;

/**
 * Tenants Controller
 *
 * @property \App\Model\Table\TenantsTable $Tenants
 * @property \App\Model\Table\UsersTable $Users
 *
 * @method \App\Model\Entity\Tenant[] paginate($object = null, array $settings = [])
 */
class TenantsController extends AppController
{

    function isAuthorized($user)
    {
        $element = $this->Users->findById($this->request->getParam('pass.0'))
            ->first();

        return TenantsPolicy::isAuthorized($this->request->action, $user, $element);
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Users');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $tenants = $this->Users->find()
            ->where(['role' => UsersTable::ROLE_TENANT]);

        $this->set(compact('tenants'));
        $this->set('_serialize', ['tenants']);
    }

    /**
     * View method
     *
     * @param string|null $id Tenant id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $tenant = $this->Tenants->get($id, [
            'contain' => ['Users']
        ]);

        $this->set('tenant', $tenant);
        $this->set('_serialize', ['tenant']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $tenant = $this->Tenants->newEntity();
        if ($this->request->is('post')) {
            $tenant = $this->Tenants->patchEntity($tenant, $this->request->getData());
            if ($this->Tenants->save($tenant)) {
                $this->Flash->success(__('The tenant has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The tenant could not be saved. Please, try again.'));
        }
        $users = $this->Tenants->Users->find('list', ['limit' => 200]);
        $this->set(compact('tenant', 'users'));
        $this->set('_serialize', ['tenant']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Tenant id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $tenant = $this->Tenants->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $tenant = $this->Tenants->patchEntity($tenant, $this->request->getData());
            if ($this->Tenants->save($tenant)) {
                $this->Flash->success(__('The tenant has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The tenant could not be saved. Please, try again.'));
        }
        $users = $this->Tenants->Users->find('list', ['limit' => 200]);
        $this->set(compact('tenant', 'users'));
        $this->set('_serialize', ['tenant']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Tenant id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod('delete');

        $locator = $this->Users->get($id);

        if ($this->Users->delete($locator)) {
            $this->Flash->success(__('Locatário excluído'));
        } else {
            $this->Flash->error(__('Erro ao excluir Locatário'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function form($id = null)
    {
        $this->set(compact('id'));

        if ($id) {
            $user = $this->Users->get($id, [
                'contain' => ['Tenants']
            ]);
        } else {
            $user = $this->Users->newEntity();
        }

        if ($this->request->is(['post', 'put'])) {
            $this->Users->patchEntity($user, $this->request->getData());

            $user['role'] = UsersTable::ROLE_TENANT;

            if (!$id) {
                $password = $this->Users->generatePassword();

                $user['username'] = $this->Users->getLastUsername() + 1;
                $user['password'] = $password;
            } else {
                $user['password'] = (new DefaultPasswordHasher)->hash($user['tenant']['password']);
            }

            if ($this->Users->save($user)) {
                if (!$id) {
                    $tenant = $this->Tenants->newEntity();

                    $tenant['password'] = $password;
                    $tenant['user_id'] = $user['id'];

                    $this->Tenants->save($tenant);
                }

                $this->Flash->success('Salvo com sucesso');

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error('Existem erros no formulário, favor verificar');
            }
        }

        $this->set(compact('user'));
    }

    public function fetch()
    {
        $this->autoRender = false;
        $this->response->type('json');

        $search = $this->Users->parseSearch($this->Users->parseUsername($this->request->getQuery('name')));

        $tenants = $this->Users->find()
            ->contain('Tenants')
            ->where(['role' => UsersTable::ROLE_TENANT])
            ->where([
                "OR" => [
                    "Users.nome LIKE" => $search,
                    "Users.username LIKE" => $search,
                ],
            ])
            ->limit(10);

        $this->response->body(json_encode($tenants));
    }
}
